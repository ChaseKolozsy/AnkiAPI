# This Dockerfile builds Anki from a source tree provided as the build context.
# Use it with context set to the cloned anki repo (../anki).

ARG PYTHON_VERSION="3.9"
ARG DEBIAN_FRONTEND="noninteractive"

# Build anki.
FROM python:$PYTHON_VERSION AS build
RUN curl -fsSL https://github.com/bazelbuild/bazelisk/releases/download/v1.7.4/bazelisk-linux-amd64 \
    > /usr/local/bin/bazel \
    && chmod +x /usr/local/bin/bazel \
    && ln -s /usr/local/bin/python /usr/bin/python
WORKDIR /opt/anki
COPY . .

# Install dependencies including ninja-build and rsync
RUN apt-get update \
    && apt-get install --yes --no-install-recommends \
    curl \
    git \
    ninja-build \
    rsync \
    && rm -rf /var/lib/apt/lists/*

# Install Rust and build the project
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
    && chmod +x $HOME/.cargo/env
ARG BUILDHASH
# Provide a dummy buildhash so Anki's build script doesn't require git
RUN mkdir -p out && bash -lc 'echo ${BUILDHASH:-00000000} > out/buildhash'
# Run build in offline mode to avoid invoking git inside container
RUN /bin/bash -c "source $HOME/.cargo/env && OFFLINE_BUILD=1 RUST_BACKTRACE=1 ./tools/build"

# Install pre-compiled Anki into a venv
FROM python:${PYTHON_VERSION}-slim as installer
WORKDIR /opt/anki/
COPY --from=build /opt/anki/out/wheels/ wheels/
RUN python -m venv venv \
    && ./venv/bin/python -m pip install --no-cache-dir setuptools wheel \
    && ./venv/bin/python -m pip install --no-cache-dir /opt/anki/wheels/*.whl \
    && ./venv/bin/python -m pip install --no-cache-dir debugpy

# Copy API server files into the venv
COPY anki_api_server.py /opt/anki/venv/
COPY blueprint_decks.py /opt/anki/venv/
COPY blueprint_exports.py /opt/anki/venv/
COPY blueprint_imports.py /opt/anki/venv/
COPY blueprint_notetypes.py /opt/anki/venv/
COPY blueprint_users.py /opt/anki/venv/
COPY blueprint_cards.py /opt/anki/venv/
COPY blueprint_db.py /opt/anki/venv/
COPY blueprint_study_sessions.py /opt/anki/venv/

# Final runtime image
FROM python:${PYTHON_VERSION}-slim as final
COPY --from=installer /opt/anki/venv /opt/anki/venv
ENV PATH=/opt/anki/venv/bin:$PATH
RUN apt-get update \
    && apt-get install --yes --no-install-recommends \
    vim \
    libasound2 \
    libdbus-1-3 \
    libfontconfig1 \
    libfreetype6 \
    libgl1 \
    libglib2.0-0 \
    libnss3 \
    libxcb-icccm4 \
    libxcb-image0 \
    libxcb-keysyms1 \
    libxcb-randr0 \
    libxcb-render-util0 \
    libxcb-shape0 \
    libxcb-xinerama0 \
    libxcb-xkb1 \
    libxcomposite1 \
    libxcursor1 \
    libxi6 \
    libxkbcommon0 \
    libxkbcommon-x11-0 \
    libxrandr2 \
    libxrender1 \
    libxtst6 \
    curl \
    && rm -rf /var/lib/apt/lists/*
RUN useradd --create-home anki
USER anki
WORKDIR /work

# Ports for API and debugpy
EXPOSE 5001
EXPOSE 5678

ENTRYPOINT ["/opt/anki/venv/bin/python", "/opt/anki/venv/anki_api_server.py"]
